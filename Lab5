## Для лабораторної роботи необхідно завантажити zip файл з даними за посиланням: 
## «https://www.dropbox.com/s/i9wi47oyhfb7qlh/rprog_data_specdata.zip?dl=0».
## Це файл містить 332 csv файлів, що містять у собі результати спостережень за забрудненням повітря дрібнодисперсними 
## частками (fine particular matter air pollution) у 332 локаціях у США. Кожен файл містить дані з одного монітору. 
## ID номер кожного монітору міститься у назві файлу. Наприклад, дані з монітору під номером 200 містяться у файлі «200.csv». 
## Кожен файл містить три змінні: Data: дата спостереження в форматі (рік-місяць-день), 
## sulfate: рівень сульфатних часток в повітрі на дату (мікрограми на кубічний метр) та 
## nitrate: рівень нітратних часток в повітрі на дату (мікрограми на кубічний метр). 
## Для цій роботи необхідно додати на Github файл pmean.R, який містить усі функції. 
## В файлі md необхідно указати виклик функції з аргументами та вивід у консоль результатів роботи функцій.

## 1. Написати функцію pmean, яка обчислює середнє значення (mean) забруднення сульфатами або нітратами серед 
## заданого переліка моніторів. Ця функція приймає три аргументи: «directory», «pollutant», «id». 
## Directory – папка, в якій розміщені дані, pollutant – вид забруднення, id – перелік моніторів. 
## Аргумент id має значення за замовчуванням 1:332. Функція повинна ігнорувати NA значення.

```r
slcr <- '\n--------\n'
nsbp <- '\n'

NORMALIZE_FILENAME <- function(name) {
  l_norm <- 3L
  f_ext = '.csv'
  
  if (nchar(name) >= l_norm) {
    return(paste(name, f_ext, sep = ''))
    
  }
  
  name <- paste('000', name, sep = '')
  
  return(paste(substr(
    name,
    nchar(name) - l_norm + 1,
    nchar(name)
  ), f_ext, sep = ''))
}

#Part 1
cat(slcr, 'Part 1', slcr, nsbp)

pmean <- function(directory, pollutant, id = c(1:332)) {
  dir_path <-
    paste('C:/Users/Daria/Desktop/Master/R&Python/labs/5/', directory, '/', sep = "")
  values <- c()
  
  for (i in id) {
    f_buff <-
      read.csv(file = paste(dir_path, NORMALIZE_FILENAME(i), sep = ""))
    col_names <- colnames(f_buff)
    
    if (pollutant %in% col_names) {
      values <- c(values, f_buff[, pollutant, drop = TRUE])
    }
  }
  return(mean(values, na.rm = TRUE))
}


test_1 <- pmean("specdata", "sulfate", 1:10)
test_2 <- pmean("specdata", "sulfate", 55)
test_3 <- pmean("specdata", "nitrate")

cat(
  slcr,
  'TESTS',
  slcr,
  'test 1:',
  test_1,
  nsbp,
  'test 2:',
  test_2,
  nsbp,
  'test 3:',
  test_3,
  nsbp
)
```
# --------
# TESTS 
#--------
# test 1: 4.064128 
# test 2: 3.587319 
# test 3: 1.702932 

## 2. Написати функцію complete, яка виводить кількість повних спостережень (the number of completely observed cases) 
## для кожного файлу. Функція приймає два аргументи: «Directory» та «id» та повертає data frame, 
## в якому перший стовпчик – ім’я файлу, а другий – кількість повних спостережень.

#Part 2
```r
cat(slcr, 'Part 2', slcr, nsbp)

complete <- function(directory, id) {
  dir_path <-
    paste('C:/Users/Daria/Desktop/Master/R&Python/labs/5/', directory, '/', sep = "")
  df <- data.frame(filename = character(), count = integer())
  
  for (i in id) {
    f_name <- NORMALIZE_FILENAME(i)
    
    f_buff <-
      read.csv(file = paste(dir_path, f_name, sep = ""))
    
    n <- sum(!is.na(f_buff['nitrate'] & f_buff['sulfate']))
    
    row <- list(id = f_name, nobs = n)
    df = rbind(df, row, stringsAsFactors = FALSE)
  }
  
  return(df)
}

print(complete("specdata", 1))
print(complete("specdata", c(2, 4, 8, 10, 12)))
print(complete("specdata", 50:60))
```
#        id nobs
# 1 001.csv  117
#        id nobs
# 1 002.csv 1041
# 2 004.csv  474
# 3 008.csv  192
# 4 010.csv  148
# 5 012.csv   96
#         id nobs
# 1  050.csv  459
# 2  051.csv  193
# 3  052.csv  812
# 4  053.csv  342
# 5  054.csv  219
# 6  055.csv  372
# 7  056.csv  642
# 8  057.csv  452
# 9  058.csv  391
# 10 059.csv  445
# 11 060.csv  448

## 3. Написати функцію corr, яка приймає два аргументи: directory (папка, де знаходяться файли спостережень) 
## та threshold (порогове значення, за замовчуванням дорівнює 0) та обчислює кореляцію між сульфатами та нітратами для моніторів, 
## кількість повних спостережень для яких більше порогового значення. Функція повинна повернути вектор значень кореляцій. 
## Якщо ні один монітор не перевищує порогового значення, функція повинна повернути numeric вектор довжиною 0. 
## Для обчислення кореляції між сульфатами та нітратами використовуйте вбудовану функцію «cor» з параметрами за замовчуванням

#Part 3
```r
cat(slcr, 'Part 3', slcr, nsbp)

corr <- function(directory, threshold = 0) {
  dir_path <-
    paste('C:/Users/Daria/Desktop/Master/R&Python/labs/5/', directory, '/', sep = "")
  f_list <- list.files(dir_path)
  values <- c()
  
  for (i in f_list) {
    f_buff <-
      read.csv(file = paste(dir_path, i, sep = ""))
    n <- sum(!is.na(f_buff['nitrate'] & f_buff['sulfate']))
    
    if (n >= threshold) {
      f_subset <-
        f_buff[!is.na(f_buff$sulfate) & !is.na(f_buff$nitrate),]
      cor_value <- cor(f_subset$sulfate, f_subset$nitrate)
      values <- c(values, cor_value)
    }
  }
  return (values)
}

cat(slcr, 150)

cr <- corr("specdata", 150)
print(cr)
print(head(cr))
print(summary(cr))

cat(slcr, 400)

cr <- corr("specdata", 400)
print(cr)
print(head(cr))
print(summary(cr))

cat(slcr, 5000)

cr <- corr("specdata", 5000)
print(cr)
print(head(cr))
print(summary(cr))
```
# 150  [1] -0.018957541 -0.140512544 -0.043897372 -0.068159562 -0.123506666
#  [6] -0.075888144 -0.159673652 -0.086841940  0.763128837 -0.157828603
# [11] -0.156998919 -0.044898818  0.117249264  0.259057178  0.133274607
# [16]  0.366201078  0.580751264  0.006863930  0.726693888  0.057741676
# [21]  0.115338086  0.465754012  0.515804375  0.412693537  0.375631176
# [26]  0.315725317  0.244560561  0.594426499  0.553514976  0.614340566
# [31]  0.460513619  0.405022501  0.434789780  0.088421364  0.118136697
# [36] -0.091022820 -0.033091304  0.440660466 -0.029683708  0.268525390
# [41]  0.277220958 -0.049108453  0.322627410  0.091139374 -0.025750053
# [46]  0.120521602 -0.061746831  0.041306963 -0.146202136 -0.162485185
# [51] -0.097254393  0.089262856  0.568403991  0.711864008  0.268203237
# [56]  0.190644585  0.227222983  0.229238882  0.005635506  0.018628108
# [61] -0.064750174  0.096614297  0.002864405  0.107184775  0.128477284
# [66] -0.042533572 -0.137041337  0.136609030  0.118975253  0.098073855
# [71]  0.066928310  0.100212474 -0.063984344 -0.066525489 -0.129245884
# [76] -0.111066409 -0.089441210 -0.114090325 -0.106280702 -0.176855164
# [81] -0.116984680  0.019138583  0.100643502 -0.073858484  0.036665921
# [86] -0.107957809 -0.167955891  0.296744105  0.347421569  0.146528765
# [91]  0.362414577  0.093330832  0.198915192  0.164602262  0.180626975
# [96]  0.176508543  0.139158631  0.231984399  0.227615918  0.275903634
#[101]  0.299630040  0.248143145  0.298344178 -0.056325366 -0.178114558
#[106]  0.002032940 -0.022802183 -0.001202233  0.085217423 -0.076409023
#[111]  0.010021716  0.016411646 -0.038785934 -0.075297768  0.041917773
#[116]  0.193324040  0.596929143  0.113596590 -0.143750037 -0.017703373
#[121]  0.284905360  0.305506111  0.150031306  0.134895077  0.172850003
#[126]  0.286076203 -0.106687748  0.244744168  0.337120085  0.424798956
#[131]  0.095921881  0.022899033  0.143330735  0.087196218  0.408741028
#[136]  0.425176879  0.361728434 -0.035090337 -0.082388453 -0.094742313
#[141] -0.087573726 -0.060405837 -0.092398269 -0.183197353  0.124650112
#[146] -0.053001162 -0.039911536  0.010158287  0.451828854  0.295793699
#[151]  0.615268727 -0.075214053  0.132207405  0.089547098 -0.019086127
#[156] -0.045552626  0.211599525 -0.073972834  0.112668377  0.138387891
#[161] -0.003207550 -0.052643174  0.042168144 -0.067460173 -0.030882797
#[166]  0.017805647  0.026138073 -0.050287543  0.016535643  0.199919014
#[171]  0.482158286  0.355110474  0.589606340  0.368038099 -0.029094866
#[176] -0.074495323  0.262101561 -0.005386993  0.258826380  0.144110820
#[181]  0.101915017  0.023020993  0.074594252  0.256665139  0.162401158
#[186] -0.003454405  0.190141976  0.184581239  0.120596460 -0.176233152
#[191] -0.144699131  0.147074115  0.273520382  0.109557323 -0.092863394
#[196] -0.182752126 -0.008836513  0.356592359 -0.089133895 -0.017185129
#[201] -0.156323514 -0.042538204  0.010235676 -0.009912754 -0.042910367
#[206] -0.210567709 -0.155957816  0.046211272 -0.060808231  0.160865053
#[211]  0.615095781  0.598343330  0.506535631  0.191834811 -0.024723462
#[216] -0.150627164 -0.002500089 -0.166201361  0.619349867  0.531380642
#[221]  0.520115665  0.466673962  0.518820173  0.394191512  0.379446208
#[226] -0.123172036 -0.061565518 -0.180133963  0.253978075  0.139867175
#[231]  0.316429404  0.268780500  0.279397143  0.267260662  0.287133842
#[1] -0.01895754 -0.14051254 -0.04389737 -0.06815956 -0.12350667 -0.07588814
#    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
#-0.21057 -0.05147  0.09333  0.12401  0.26836  0.76313 
#
#--------
# 400  [1] -0.018957541 -0.043897372 -0.068159562 -0.075888144  0.763128837
#  [6] -0.157828603 -0.044898818  0.117249264  0.259057178  0.133274607
# [11]  0.366201078  0.006863930  0.726693888  0.057741676  0.115338086
# [16]  0.465754012  0.515804375  0.375631176  0.315725317  0.244560561
# [21]  0.594426499  0.553514976  0.405022501  0.434789780  0.088421364
# [26]  0.118136697 -0.033091304  0.277220958 -0.049108453  0.091139374
# [31] -0.025750053 -0.061746831  0.041306963 -0.146202136 -0.097254393
# [36]  0.089262856  0.711864008  0.268203237  0.190644585  0.002864405
# [41] -0.042533572  0.098073855  0.100212474 -0.063984344 -0.066525489
# [46] -0.089441210  0.100643502  0.036665921  0.296744105  0.347421569
# [51]  0.198915192  0.164602262  0.231984399  0.275903634  0.248143145
# [56]  0.002032940  0.085217423  0.010021716 -0.038785934  0.041917773
# [61]  0.596929143  0.113596590 -0.017703373  0.305506111  0.150031306
# [66]  0.134895077  0.172850003  0.286076203  0.337120085  0.424798956
# [71]  0.095921881  0.022899033  0.143330735  0.408741028  0.361728434
# [76] -0.035090337 -0.082388453 -0.094742313 -0.092398269 -0.053001162
# [81]  0.010158287  0.295793699 -0.075214053  0.132207405  0.089547098
# [86] -0.019086127  0.138387891 -0.003207550  0.017805647 -0.050287543
# [91]  0.016535643  0.355110474  0.589606340 -0.029094866 -0.074495323
# [96] -0.005386993  0.258826380  0.144110820  0.074594252  0.256665139
#[101]  0.162401158  0.190141976 -0.176233152 -0.144699131  0.147074115
#[106]  0.273520382  0.109557323 -0.092863394 -0.089133895 -0.017185129
#[111] -0.156323514 -0.042538204 -0.009912754 -0.042910367  0.046211272
#[116] -0.060808231  0.160865053  0.598343330  0.506535631  0.191834811
#[121] -0.024723462  0.518820173 -0.123172036  0.253978075  0.268780500
#[126]  0.279397143  0.267260662
#[1] -0.01895754 -0.04389737 -0.06815956 -0.07588814  0.76312884 -0.15782860
#    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
#-0.17623 -0.03109  0.10021  0.13969  0.26849  0.76313 

#--------
# 5000NULL
#NULL
#Length  Class   Mode 
#     0   NULL   NULL 

